
import Head from 'next/head';
import styles from '../styles/Explore.module.css'
import Room from '../components/Room';
import { useState, useEffect } from 'react';
import axios from 'axios';
import { Container, Grid, TextField,FormControl,InputLabel,Select,MenuItem,Typography,ListItemButton,ListItem,FormControlLabel,Checkbox, Paper,List ,ListItemSecondaryAction, IconButton, ListItemText,ListSubheader, ListItemIcon} from '@mui/material';
import Loading from '../components/Loading';
import Map from '../components/Map';
import OpenInNewIcon from '@mui/icons-material/OpenInNew';
import { fontWeight } from '@mui/system';

function Home() {

  const [selectedBuildings, setSelectedBuildings] = useState([]);
  const [selectedDate, setSelectedDate] = useState(new Date().toISOString().slice(0, 10));
  const [selectedStartTime, setSelectedStartTime] = useState('08:00:00');
  const [selectedEndTime, setSelectedEndTime] = useState('21:00:00');
  const [rooms, setRooms] = useState([]);
  const [filteredRooms,setFilteredRooms] = useState([]);
  const [fetchingRooms,setFetchingRooms] = useState(false);
  const [fetchingBuildings,setFetchingBuildings] = useState(false);
  const [buildings,setBuildings] = useState([]);
  const [specificTime,setSpecificTime] = useState(false);
  const [selectedRoom,setSelectedRoom] = useState(null);

  const [roomsByBuilding,setRoomsByBuilding] = useState(null);

  const [searchQuery,setSearchQuery] = useState('');

  useEffect(() => {
    setRooms([])
    setFetchingRooms(true);
    async function fetchData() {
      const response = await axios.get('../api/rooms', {
        params: {
          date: selectedDate
        },
      });
      setFetchingRooms(false);
      setRooms(response.data);
    }
    fetchData();
  }, [selectedDate]);

  useEffect(() => {
    let result = []

    // Buildings
    if (selectedBuildings.length == 0){
      result = rooms;
      
    }else{
      result = rooms.filter(room => selectedBuildings.includes(room.building));
    }


    //Time
    if(specificTime){
      result = result.filter((room) => {
        const free = room.timeSlots.filter(
          (timeSlot) =>
            timeSlot.start <= selectedStartTime &&
            timeSlot.end >= selectedEndTime
        );
        return free.length > 0;
      });
    }
    
    if(searchQuery.length > 0){
      result = result.filter((room) => 
        room.name.includes(searchQuery)
        || room.building.includes(searchQuery))
    }
    result = result.sort((r1,r2) => r1.building > r2.building)
    setFilteredRooms(result);
  },[rooms,selectedBuildings,selectedStartTime,selectedEndTime,specificTime,searchQuery])


  useEffect(()=>{
    let res = buildings.map((building) => {
      const buildingRooms = filteredRooms.filter((room) => room.building === building.building);
      return {
        ...building,
        rooms: buildingRooms
      };
    });
    //res = res.filter((building) => building.rooms.length > 0)
    setRoomsByBuilding(res);
  },[filteredRooms,buildings])

  useEffect(() => {
    setBuildings([])
    setFetchingBuildings(true);
    async function fetchData() {
      const response = await axios.get('../api/buildings');
      setFetchingBuildings(false);
      setBuildings(response.data);
    }
    fetchData();
  }, []);

  const toHourMinute = (date) => {
    return date.slice(0,5)
  }


  return (<>
  
    <Head>
        <title>KTH places</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
    </Head>
    <div className={styles.main}>

    {fetchingBuildings ? <Loading /> :
      <Container >
      <Grid container spacing={3}>
          <Grid item xs={12} sm={6}>
            <FormControl fullWidth>
              <InputLabel id="building-label">Building</InputLabel>
              <Select
                labelId="building-label"
                id="building"
                multiple
                value={selectedBuildings}
                onChange={(event) => setSelectedBuildings(event.target.value)}
                renderValue={(selected) => selected.join(', ')}
              >
                <MenuItem key="clear-all" onClick={() => setSelectedBuildings([])}>
                  Clear all
                </MenuItem>
                {buildings.map((building) => (
                  <MenuItem key={building.short} value={building.building}>
                    {building.building} ({building.short})
                  </MenuItem>
                ))}
              </Select>
            </FormControl>
          </Grid>
          <Grid item xs={12} sm={6}>
            <TextField
              fullWidth
              label="Date"
              variant="outlined"
              type="date"
              value={selectedDate}
              onChange={(event) => setSelectedDate(event.target.value)}
            />
          </Grid>
          
          <Grid item xs={12} sm = {2}>
            <InputLabel id="specificTime-label">Specific time</InputLabel>
            <Checkbox
              checked={specificTime}
              onChange={(event) => setSpecificTime(event.target.checked)}
              labelId="specificTime-label"
            />
            
          </Grid>
          <Grid item xs = {12} sm={5}>
              <TextField
                fullWidth
                disabled={!specificTime}
                label="Start time"
                variant="outlined"
                type="time"
                value={selectedStartTime}
                onChange={(event) => setSelectedStartTime(event.target.value)}
              />
          </Grid>
          <Grid item xs = {12} sm={5}>
              <TextField
                fullWidth
                disabled={!specificTime}
                label="End time"
                variant="outlined"
                type="time"
                value={selectedEndTime}
                onChange={(event) => setSelectedEndTime(event.target.value)}
              />
          </Grid>
          <Grid item xs = {12}>
            <TextField 
              fullWidth
              label="Search rooms"
              variant='outlined'
              value={searchQuery}
              onChange = {(e) => setSearchQuery(e.target.value)}
            />
          </Grid>
          
        </Grid>
        <Grid container spacing={3}>
          <Grid item xs = {12} >
            <Typography variant="subtitle1" color="textSecondary">
              Showing {filteredRooms.length} rooms
            </Typography>
          </Grid>
          <Grid item sm = {12} md={8}>
              {/*fetchingRooms ? <Loading /> : 
              
              filteredRooms.map(room => 
              <Room key = {room.id} room = {room} />
              )*/}
          
          <Map rooms = {filteredRooms} roomsByBuildings={roomsByBuilding} setSelectedRoom={setSelectedRoom} setSelectedBuildings={setSelectedBuildings}/>
          
          </Grid>
          <Grid item sm = {12} md={4}>
            <Paper style={{maxHeight: 500, overflow: 'auto'}}>
              <List>
                {roomsByBuilding?.map((building) => (
                  <li key={building.short}>
                    <ul>
                      <ListSubheader 
                        key={building.short}
                        sx={{
                          fontSize: '1.2rem',
                          fontWeight: 'bold',
                          backgroundColor: '#F0F0F0'
                        }}
                      >
                        {`${building.building}`}
                      </ListSubheader>
                      {building.rooms.map((room) => (
                        <ListItemButton key={room.id} onClick={() => window.open('https://www.kth.se/places/room/id/' + room.id,'_blank')}>
                          <ListItemText 
                            primary={room.name}
                            secondary={room.timeSlots.map(slot => (
                              <Typography 
                                key = {`${slot.start}-${slot.end}`}
                                variant="body2" color="textSecondary" component="p"
                              >
                                  {`${toHourMinute(slot.start)}-${toHourMinute(slot.end)}`}
                              </Typography> 
                            ))}
                          />
                          <ListItemSecondaryAction>
                            <OpenInNewIcon/>
                          </ListItemSecondaryAction>
                          
                        </ListItemButton>
                      ))}
                    </ul>
                  </li>
                ))}
              </List>
            </Paper>
          
          </Grid>
          
        </Grid>
        {fetchingRooms && <Loading />}
        
      </Container>
      

    }
    </div>
    </>
  );
}

export default Home;
